#!/bin/python3

import requests
from cmd import Cmd
import os
import json

class TesterCmd(Cmd):
    def __init__(self, baseURL = None):
        Cmd.__init__(self)
    
        self.prompt = "Tester> "
        self.options = {
            "baseURL" : baseURL,
            "headers" : {
                "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:95.0) Gecko/20100101 Firefox/95.0"
            } ,
        }
    
    def do_get(self, args):
        url = self.options["baseURL"] + args
        r = requests.get(url, headers=self.options["headers"])
        print(r.text)

    def do_post(self, args):
        content = args.split(" ")
        
        endpoint = content[0]
        body_data = {} 

        try:
            for x in content[1].split(","):
                parsed = x.split(":")
                body_data[parsed[0]] = parsed[1]
        except IndexError:
            pass

        url = self.options["baseURL"] + endpoint
        r = requests.post(url, data=body_data , headers=self.options["headers"])
        print(r.text)

    def do_put(self, args):
        content = args.split(" ")
        
        endpoint = content[0]
        body_data = {} 

        try:
            for x in content[1].split(","):
                parsed = x.split(":")
                body_data[parsed[0]] = parsed[1]
        except IndexError:
            pass

        url = self.options["baseURL"] + endpoint
        r = requests.put(url, headers=self.options["headers"], data=body_data)
        print(r.text)
        
    def do_delete(self, args):
        content = args.split(" ")
        
        endpoint = content[0]
        body_data = {} 

        try:
            for x in content[1].split(","):
                parsed = x.split(":")
                body_data[parsed[0]] = parsed[1]
        except IndexError:
            pass

        url = self.options["baseURL"] + endpoint
        r = requests.delete(url, headers=self.options["headers"], data=body_data)
        print(r.text)
        
    def do_clear(self, args):
        os.system("clear")

    def do_show_options(self, args):
        print(json.dumps(self.options, indent=2))

    def do_set_options(self, args):
        try:
            parsed_line = args.split(" ")
            key = parsed_line[0]
            value = parsed_line[1]
        except IndexError:
            print("[+] Invalid Arguments, needed <KEY> <VALUE> ")
        else:
    
            if key in list(self.options.keys()):
                self.options[key] = value
            else:
                keys = ",".join(list(self.options.keys()))
                print(f"[+] Invalid Keys, needed one of this ({keys})")

if __name__ == "__main__":
    import sys
    args = sys.argv[1:]
    arg = ""
    
    if len(args) > 0:
        arg =  args[0]
        TesterCmd(arg).cmdloop()
    else:
        TesterCmd().cmdloop()
